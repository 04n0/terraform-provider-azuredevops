// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/terraform-provider-azuredevops/azuredevops/utils/securityroles (interfaces: Client)

// Package azdosdkmocks is a generated GoMock package.
package azdosdkmocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	securityroles "github.com/microsoft/terraform-provider-azuredevops/azuredevops/utils/securityroles"
)

// MockSecurityrolesClient is a mock of Client interface.
type MockSecurityrolesClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityrolesClientMockRecorder
}

// MockSecurityrolesClientMockRecorder is the mock recorder for MockSecurityrolesClient.
type MockSecurityrolesClientMockRecorder struct {
	mock *MockSecurityrolesClient
}

// NewMockSecurityrolesClient creates a new mock instance.
func NewMockSecurityrolesClient(ctrl *gomock.Controller) *MockSecurityrolesClient {
	mock := &MockSecurityrolesClient{ctrl: ctrl}
	mock.recorder = &MockSecurityrolesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityrolesClient) EXPECT() *MockSecurityrolesClientMockRecorder {
	return m.recorder
}

// DeleteSecurityRoleAssignment mocks base method.
func (m *MockSecurityrolesClient) DeleteSecurityRoleAssignment(arg0 context.Context, arg1 *securityroles.DeleteSecurityRoleAssignmentArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityRoleAssignment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecurityRoleAssignment indicates an expected call of DeleteSecurityRoleAssignment.
func (mr *MockSecurityrolesClientMockRecorder) DeleteSecurityRoleAssignment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityRoleAssignment", reflect.TypeOf((*MockSecurityrolesClient)(nil).DeleteSecurityRoleAssignment), arg0, arg1)
}

// GetSecurityRoleAssignment mocks base method.
func (m *MockSecurityrolesClient) GetSecurityRoleAssignment(arg0 context.Context, arg1 *securityroles.GetSecurityRoleAssignmentArgs) (*securityroles.SecurityRoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityRoleAssignment", arg0, arg1)
	ret0, _ := ret[0].(*securityroles.SecurityRoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityRoleAssignment indicates an expected call of GetSecurityRoleAssignment.
func (mr *MockSecurityrolesClientMockRecorder) GetSecurityRoleAssignment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityRoleAssignment", reflect.TypeOf((*MockSecurityrolesClient)(nil).GetSecurityRoleAssignment), arg0, arg1)
}

// ListSecurityRoleAssignments mocks base method.
func (m *MockSecurityrolesClient) ListSecurityRoleAssignments(arg0 context.Context, arg1 *securityroles.ListSecurityRoleAssignmentsArgs) (*[]securityroles.SecurityRoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityRoleAssignments", arg0, arg1)
	ret0, _ := ret[0].(*[]securityroles.SecurityRoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityRoleAssignments indicates an expected call of ListSecurityRoleAssignments.
func (mr *MockSecurityrolesClientMockRecorder) ListSecurityRoleAssignments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityRoleAssignments", reflect.TypeOf((*MockSecurityrolesClient)(nil).ListSecurityRoleAssignments), arg0, arg1)
}

// ListSecurityRoleDefinitions mocks base method.
func (m *MockSecurityrolesClient) ListSecurityRoleDefinitions(arg0 context.Context, arg1 *securityroles.ListSecurityRoleDefinitionsArgs) (*[]securityroles.SecurityRoleDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityRoleDefinitions", arg0, arg1)
	ret0, _ := ret[0].(*[]securityroles.SecurityRoleDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityRoleDefinitions indicates an expected call of ListSecurityRoleDefinitions.
func (mr *MockSecurityrolesClientMockRecorder) ListSecurityRoleDefinitions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityRoleDefinitions", reflect.TypeOf((*MockSecurityrolesClient)(nil).ListSecurityRoleDefinitions), arg0, arg1)
}

// SetSecurityRoleAssignment mocks base method.
func (m *MockSecurityrolesClient) SetSecurityRoleAssignment(arg0 context.Context, arg1 *securityroles.SetSecurityRoleAssignmentArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSecurityRoleAssignment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSecurityRoleAssignment indicates an expected call of SetSecurityRoleAssignment.
func (mr *MockSecurityrolesClientMockRecorder) SetSecurityRoleAssignment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSecurityRoleAssignment", reflect.TypeOf((*MockSecurityrolesClient)(nil).SetSecurityRoleAssignment), arg0, arg1)
}
