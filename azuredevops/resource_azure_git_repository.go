package azuredevops

import (
	"fmt"

	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"

	"github.com/microsoft/azure-devops-go-api/azuredevops/core"
	"github.com/microsoft/azure-devops-go-api/azuredevops/git"
	"github.com/microsoft/terraform-provider-azuredevops/azuredevops/utils/converter"
)

func resourceAzureGitRepository() *schema.Resource {
	return &schema.Resource{
		Create: resourceAzureGitRepositoryCreate,
		Read:   resourceAzureGitRepositoryRead,
		Update: resourceAzureGitRepositoryUpdate,
		Delete: resourceAzureGitRepositoryDelete,

		Schema: map[string]*schema.Schema{
			"project": {
				Type:     schema.TypeString,
				Required: true,
			},
			"name": {
				Type:     schema.TypeString,
				ForceNew: false,
				Required: true,
			},
			"default_branch": {
				Type:     schema.TypeString,
				Optional: true,
				Default:  "",
			},
			"is_fork": {
				Type:     schema.TypeBool,
				Computed: true,
			},
			"remote_url": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"size": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"ssh_url": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"url": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"web_url": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"valid_remote_urls": {
				Type:     schema.TypeList,
				Computed: true,
				Elem:     &schema.Schema{Type: schema.TypeString},
			},
		},
	}
}

func resourceAzureGitRepositoryCreate(d *schema.ResourceData, m interface{}) error {
	// the name is used for the ID simply to make the stubs work. It should be replaced with an ID that is generated by the AzDO service once create() is implemented
	name := d.Get("name").(string)

	d.SetId(name)

	return resourceAzureGitRepositoryRead(d, m)
}

func resourceAzureGitRepositoryRead(d *schema.ResourceData, m interface{}) error {
	clients := m.(*aggregatedClient)

	id := d.Id()
	name := d.Get("name").(string)
	projectNameOrId := d.Get("project").(string)
	repo, err := azureGitRepositoryRead(clients, id, name, projectNameOrId)
	if err != nil {
		return fmt.Errorf("Error looking up repository with ID %s and Name %s. Error: %v", id, name, err)
	}

	err = flattenAzureGitRepository(clients, d, repo)
	if err != nil {
		return fmt.Errorf("Error flattening repository: %v", err)
	}
	return nil
}

func resourceAzureGitRepositoryUpdate(d *schema.ResourceData, m interface{}) error {
	return resourceAzureGitRepositoryRead(d, m)
}

func resourceAzureGitRepositoryDelete(d *schema.ResourceData, m interface{}) error {
	return nil
}

// Lookup an Azure Git Repository using the ID, or name if the ID is not set.
// Note: This is a stubbed implementation and should be implemented in https://github.com/microsoft/terraform-provider-azuredevops/issues/94
func azureGitRepositoryRead(clients *aggregatedClient, id string, name string, projectNameOrId string) (*git.GitRepository, error) {
	identifier := id
	if identifier == "" {
		identifier = name
	}

	repoId, _ := uuid.NewUUID()
	repo := git.GitRepository{
		Id:              &repoId,
		Name:            &name,
		DefaultBranch:   converter.String("master"),
		IsFork:          converter.Bool(false),
		RemoteUrl:       converter.String(""),
		SshUrl:          converter.String(""),
		Url:             converter.String(""),
		WebUrl:          converter.String(""),
		ValidRemoteUrls: &[]string{},
		Project: &core.TeamProjectReference{
			Name: &projectNameOrId,
		},
	}

	return &repo, nil
}

func flattenAzureGitRepository(clients *aggregatedClient, d *schema.ResourceData, repository *git.GitRepository) error {
	d.SetId(repository.Id.String())
	d.Set("name", converter.ToString(repository.Name, ""))

	d.Set("project", repository.Project.Name)
	d.Set("default_branch", converter.ToString(repository.DefaultBranch, ""))
	d.Set("is_fork", repository.IsFork)
	d.Set("remote_url", converter.ToString(repository.RemoteUrl, ""))
	d.Set("size", repository.Size)
	d.Set("ssh_url", converter.ToString(repository.SshUrl, ""))
	d.Set("url", converter.ToString(repository.Url, ""))
	d.Set("web_url", converter.ToString(repository.WebUrl, ""))
	d.Set("valid_remote_urls", repository.ValidRemoteUrls)

	return nil
}
